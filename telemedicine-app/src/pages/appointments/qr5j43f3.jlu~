import React, { useState, useEffect }  from 'react';
import './appointments.css';
import Footer from '../../components/Footer/Footer';
import Navbar from '../../components/Navbar/Navbar';
import Axios from 'axios';
import { Accordion, Card, Button } from 'react-bootstrap'
import 'bootstrap/dist/css/bootstrap.min.css';
import { Link, useParams } from "react-router-dom";
import ReactDOM from "react-dom";
import './Tabs.css';
import Chevron from '../../components/inbox components/Chevron.js'
import authUserObject from '../../middleware/authUserObject';
import moment from 'moment'; 
import { v1 as uuid } from "uuid";
import { useHistory } from 'react-router-dom';


import Popup from 'reactjs-popup';
import 'reactjs-popup/dist/index.css';

import NotesPopUp from '../doctors/NotesPopUp.js';


function NoAppointments() {

    const [listOfAppointments, setListOfAppointments] = useState([]);
    const [listOfLocations,setListOfLocations] = React.useState([]);

    const [pastAppointments, setPastAppointments] = useState([]);
    const [upcomingAppointments, setUpcomingAppointments] = useState([]);

    const [show, setShow] = useState("");
    const [isLoaded, setIsLoaded] = useState(false);
    const [items, setItems] = useState([]);
    const history = useHistory();

    function handleOpen() {
       setShow(show === "" ? "active" : "");
	}

    const [toggleState, setToggleState] = useState(1);
    const [toggled, setToggled] = useState(false);

    const toggleTab = (index) => {
        setToggleState(index);
    };

    const CreateRoom = (apptId) => {
        const id = uuid();
        history.push(`/room/${id}`);
        updateVirtualID(id, apptId);
    }

    const updateVirtualID = (virtualID, apptId) => {
        Axios.post(`https://telemedicine5a-backend.herokuapp.com/appointments/updateApptInfo/${apptId}`, {
            virtualID: virtualID,
        }).then(response => {
            console.log('ID to update with', virtualID)
            console.log(response)
        }).catch((err) => {
            console.log(err)
        })
    }

    const toggleAccordion = (index) => {

        if(toggled === index){
          return setToggled(null);
        }
    
        setToggled(index);
       
    }

     const [date,setDate] = React.useState(new Date());

     const [cancel, setCancel] = useState('');

    

    useEffect(() => {

        Axios.get(`https://telemedicine5a-backend.herokuapp.com/appointments/getAppointments/${authUserObject.userId}`)
        .then((response) => {

            setListOfAppointments(response.data);

           
            console.log(response.data);


            const past = [];
            const upcoming = [];

            var current = moment(date, 'mm-dd-yyyy').format();
            
            var currDate = current.slice(0, 10);


            var currentTime = moment();
           // console.log("current time: " + currentTime);


            for(let key in response.data) {
        
                //var dataDate = response.data[key].date.slice(0, 10);
                var dataDate = response.data[key].date;

                //var apiDate = moment(response.data[key].date, 'mm-dd-yyyy').valueOf()
                var apiDateGet = response.data[key].date;
                var apiDate = apiDateGet.valueOf;

                //console.log("api date: " + apiDateGet);

          
               
                var apiTime = moment(response.data[key].time, "hh:mm a");
                console.log("apiTime: " + apiTime);
                
                 console.log("dataDate: " + dataDate);

                  console.log("currentTime: " + currentTime);

                  console.log("currDate: " + currDate);

                  console.log('\n');
                
                if(moment(currDate).isAfter(dataDate)) {

               
                    past.push(response.data[key]); 
                   
                           
				} 

                if(moment(currDate).isBefore(dataDate)) {
                    upcoming.push(response.data[key]);
                }

                if(moment(currDate).isSame(dataDate)) {
                     if(currentTime > apiTime) {
                        past.push(response.data[key]); 
                        
					} else {
                        upcoming.push(response.data[key]);
                       
					}
				} 

               
			}

            

            setPastAppointments(past.sort(byDate));
            setUpcomingAppointments(upcoming.sort(byDate));

           
        })
        .catch((err) => {
            console.log(err, "Unable to get appointments");
        }, []);


        const getLocations = (  ) => {
        Axios.get(`https://telemedicine5a-backend.herokuapp.com/location/getLocations`)
            .then((response) => {                
                let data = response.data;           
                console.log("getLocations() - response:",data);
                data.forEach(e=>{setListOfLocations(listOfLocations=>[...listOfLocations,{
                        label: e.name,
                        value: e._id,
                    }]
                )})
            }).catch((err) => {
                console.log(err, "Unable to get Locations");
            });
        }

    }, []);


    //Cancel appnt function

    const triggerCancel = (e) => {
       
        console.log(e);
        setCancel(e);
        
        

        /*Axios.post('.../cancelAppt/:apptId', {
           
            
        }).then((response) => {


        }).catch((err) => {
                          
        });*/
	}

    function byDate(a, b) {
        return new Date(a.date).valueOf() - new Date(b.date).valueOf();
	}

    const [value,setValue] = useState();

    const refreshPage = () => {
       window.location.reload();
	}

    const [isShownRefresh, setIsShownRefresh] = useState(false);
    

   return (

       

       <div className='appointments'>
           <Navbar/>
               <div className='Appointments-container-outer'>
                   <div className='Appointments-container-inner'>
                       <div className='Appointments-card'>


                          <h6>View new appointment</h6>
                          <Button className="refreshBtn" onClick={refreshPage} 
                             
                                <i class="fas fa-redo-alt"></i>
                                
                          </Button>
                          {isShownRefresh && (
                            <div>
                              Click to view new appointment
                            </div>
						  )}
                         

                          <Link to='/DoctorSearch'>
                              <Button className="button">
                                 Create New <i class="fas fa-plus"></i>
                              </Button>
                          </Link>

                        
                          <div className="bloc-tabs">

                            <button className={toggleState === 1 ? "tabs active-tabs" : "tabs"} onClick={() => toggleTab(1)}>
                                Upcoming 
                            </button>

                            <button className={toggleState === 2 ? "tabs active-tabs" : "tabs"} onClick={() => toggleTab(2)}>
                                Past
                            </button>
        
                          </div>


                          <div className="content-tabs">

                             <div className={toggleState === 1 ? "content  active-content" : "content"}>

                                <h4>All Upcoming Appointments</h4>
                                <hr />

                                {upcomingAppointments.map((appointment, index) => {

                                /*
                                    var sDate = appointment.date;
                                    var dateSlice = sDate.slice(0, 10);
                                    var year = dateSlice.slice(0, 4);
                                    var month = dateSlice.slice(5, 7);
                                    var day = dateSlice.slice(8, 10);

                                    var returnDate = month + "-" + day + "-" + year;

                                */
                                     //  <button onClick={CreateRoom(currApptId)} className="btnCall">Start Call</button>  
                                    return (
                                        
                                        <div className="accordion1">
                    
                                            <div className="accordion1-header" onClick={() => toggleAccordion(index)} key={appointment.index}>
                                                <h5 className="date">{appointment.date}</h5>
                                                <h5 className="time">{appointment.time}</h5>
                                                <h5 className="subject">{appointment.type}</h5>
                                               
                                                
                                                <b>
                                                    {toggled === index ? 
                                                        <Chevron className="accordion__icon" width={15} fill="#fc59ff"/> 
                                                        : <Chevron className="accordion__icon rotate" width={15} fill="#fc59ff"/>
                                                    }
                                                </b>
                                                
                                            </div>

                                          
                                          
                                            {toggled === index && (

                                                <div className="accordion1-body">
                                                
                                                    <h1 className="patient">Patient: </h1>
                                                    <h1 className="doctor">Doctor Id: {appointment.doctorUID}</h1>
                                                    <h1 className="address">Location Id: {appointment.locationUID}</h1>
                                                    
                                                    
                                                    <Link to='/client'>
                                                        <h1>
                                                        <button className="btnCall">Start Call</button>     
                                                        </h1>
                                                    </Link>
                                                    
                                                     
                                                    <h1><button className="cancelBtn" onClick={()=>triggerCancel(appointment._id)}>Cancel</button></h1>
                                                    <NotesPopUp
                                                    value={appointment.appntNotes}
                                                    />
                                               
                             
                                                </div>
                                            )}
                                        
                                        </div> 
                                    );
                                })}
                             </div>


                             <div className={toggleState === 2 ? "content  active-content" : "content"}>

                                <h4>All Past Appointments</h4>
                                <hr />

                                  {pastAppointments.map((appointment, index) => {

                                  /*
                                    var sDate = appointment.date;
                                    var dateSlice = sDate.slice(0, 10);
                                    var year = dateSlice.slice(0, 4);
                                    var month = dateSlice.slice(5, 7);
                                    var day = dateSlice.slice(8, 10);

                                    var returnDate = month + "-" + day + "-" + year;
                                */
                                    //  <button onClick={CreateRoom(currApptId)} className="btnCall">Start Call</button>  
                                    return (
                                        
                                        <div className="accordion1">
                    
                                            <div className="accordion1-header" onClick={() => toggleAccordion(index)} key={appointment.index}>
                                                <h5 className="date">{appointment.date}</h5>
                                                <h5 className="time">{appointment.time}</h5>
                                                <h5 className="subject">{appointment.type}</h5>
                                             
                                                
                                                <b>
                                                    {toggled === index ? 
                                                        <Chevron className="accordion__icon" width={15} fill="#fc59ff"/> 
                                                        : <Chevron className="accordion__icon rotate" width={15} fill="#fc59ff"/>
                                                    }
                                                </b>
                                                
                                            </div>
                                           
                                            
                                          
                                            {toggled === index && (

                                                <div className="accordion1-body">
                                                
                                                    <h1 className="patient">Patient: </h1>
                                                    <h1 className="doctor">{appointment.doctorUID}</h1>
                                                    <h1 className="address">{appointment.locationUID}</h1>
                                                    
                                                    <Link to='/client'>
                                                        <h1>
                                                        <button className="btnCall">Start Call</button>     
                                                        </h1>
                                                    </Link>
                                                    
                                                     
                                                    <h1><button className="cancelBtn" onClick={()=>triggerCancel(appointment._id)}>Cancel</button></h1>
                                                    <NotesPopUp
                                                    value={appointment.appntNotes}
         
                                                    />
                                                    
                             
                                                </div>
                                            )}
                                        
                                        </div> 
                                    );
                                })} 
                                
                                   
                             </div>

                           </div>

                       </div>

                   </div>

               </div>

           <Footer/>

       </div>

   )


}

export default NoAppointments;